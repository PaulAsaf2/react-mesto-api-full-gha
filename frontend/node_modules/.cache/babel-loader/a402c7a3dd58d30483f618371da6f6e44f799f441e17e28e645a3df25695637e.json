{"ast":null,"code":"// export const baseUrl = 'https://auth.nomoreparties.co'\nexport const baseUrl = 'http://localhost:3000';\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\nexport function register(email, password) {\n  return fetch(`${baseUrl}/signup`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(checkResponse);\n}\nexport function authorize(email, password) {\n  return fetch(`${baseUrl}/signin`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(checkResponse).then(data => {\n    if (data.token) {\n      localStorage.setItem('userId', data._id);\n      return data;\n    }\n  });\n}\nexport function getContent(token) {\n  return fetch(`${baseUrl}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // \"Authorization\": `Bearer ${token}`\n    }\n  }).then(checkResponse);\n}","map":{"version":3,"names":["baseUrl","checkResponse","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","body","JSON","stringify","then","authorize","data","token","localStorage","setItem","_id","getContent"],"sources":["C:/Users/Paul/react-mesto-api-full-gha/frontend/src/utils/authorization.js"],"sourcesContent":["// export const baseUrl = 'https://auth.nomoreparties.co'\r\nexport const baseUrl = 'http://localhost:3000'\r\n\r\nfunction checkResponse(res) {\r\n  if (res.ok) { return res.json(); }\r\n  else {\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n}\r\n\r\nexport function register(email, password) {\r\n  return fetch(`${baseUrl}/signup`, {\r\n    method: 'POST',\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ password, email })\r\n  })\r\n    .then(checkResponse)\r\n}\r\n\r\nexport function authorize(email, password) {\r\n  return fetch(`${baseUrl}/signin`, {\r\n    method: 'POST',\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ password, email })\r\n  })\r\n    .then(checkResponse)\r\n    .then((data) => {\r\n      if (data.token) {\r\n        localStorage.setItem('userId', data._id);\r\n        return data;\r\n      }\r\n    })\r\n}\r\n\r\nexport function getContent(token) {\r\n  return fetch(`${baseUrl}/users/me`, {\r\n    method: 'GET',\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // \"Authorization\": `Bearer ${token}`\r\n    }\r\n  })\r\n    .then(checkResponse)\r\n}"],"mappings":"AAAA;AACA,OAAO,MAAMA,OAAO,GAAG,uBAAuB;AAE9C,SAASC,aAAaA,CAACC,GAAG,EAAE;EAC1B,IAAIA,GAAG,CAACC,EAAE,EAAE;IAAE,OAAOD,GAAG,CAACE,IAAI,EAAE;EAAE,CAAC,MAC7B;IACH,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;AACF;AAEA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACxC,OAAOC,KAAK,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAChCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,QAAQ;MAAED;IAAM,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAAChB,aAAa,CAAC;AACxB;AAEA,OAAO,SAASiB,SAASA,CAACT,KAAK,EAAEC,QAAQ,EAAE;EACzC,OAAOC,KAAK,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAChCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,QAAQ;MAAED;IAAM,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAAChB,aAAa,CAAC,CACnBgB,IAAI,CAAEE,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,IAAI,CAACI,GAAG,CAAC;MACxC,OAAOJ,IAAI;IACb;EACF,CAAC,CAAC;AACN;AAEA,OAAO,SAASK,UAAUA,CAACJ,KAAK,EAAE;EAChC,OAAOT,KAAK,CAAE,GAAEX,OAAQ,WAAU,EAAE;IAClCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF;EACF,CAAC,CAAC,CACCI,IAAI,CAAChB,aAAa,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}